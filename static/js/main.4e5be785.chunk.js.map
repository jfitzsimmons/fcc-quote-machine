{"version":3,"sources":["quotes.js","App.js","serviceWorker.js","index.js"],"names":["currentQuote","currentAuthor","getQuote","data","randomQuote","quotes","Math","floor","random","length","getRandomQuote","quote","author","text","document","getElementById","innerHTML","addEventListener","e","url","preventDefault","encodeURIComponent","window","open","fetch","then","response","json","event","catch","err","App","react_default","a","createElement","id","className","href","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAAIA,SAAe,IACjBC,EAAgB,GAqBX,SAASC,EAASC,GACvB,IAAIC,EALN,SAAwBD,GACtB,OAAOA,EAAKE,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAAKE,OAAOI,SAIxCC,CAAeP,GACjCH,EAAeI,EAAYO,MAC3BV,EAAgBG,EAAYQ,OAE5B,IAAIC,EAAOC,SAASC,eAAe,QAC/BH,EAASE,SAASC,eAAe,UACrCF,EAAKG,UAAY,GACjBJ,EAAOI,UAAY,GACnBH,EAAKG,WAAahB,EAClBY,EAAOI,WAAaf,EAEpBa,SAASC,eAAe,eAAeE,iBAAiB,QAAS,SAASC,GA/B5E,IAAiBC,EAgCbD,EAAEE,iBAhCWD,EAiCL,8EAAgFE,mBAAmB,IAAMrB,EAAe,KAAOC,GAhCzIqB,OAAOC,KAAKJ,EAAK,QAAS,oGAI1BK,MAAM,0IAA0IC,KAAK,SAAAC,GACnJ,OAAOA,EAASC,SACfF,KAAK,SAAAtB,GACOW,SAASC,eAAe,aAC9BE,iBAAiB,QAAS,SAACW,GAAD,OAAW1B,EAASC,KACrDD,EAASC,KACR0B,MAAM,SAAAC,UCYIC,mLApBX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YAAYC,UAAU,aAC5BJ,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OAAOC,UAAU,KAGzBJ,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SAASC,UAAU,KAG3BJ,EAAAC,EAAAC,cAAA,UAAQC,GAAG,cAAcC,UAAU,IACjCJ,EAAAC,EAAAC,cAAA,KAAGG,KAAK,4BAAR,UAEFL,EAAAC,EAAAC,cAAA,UAAQC,GAAG,YAAYC,UAAU,IAAjC,qBAbUE,aCMEC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAAS/B,SAASC,eAAe,SDmH3C,kBAAmB+B,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.4e5be785.chunk.js","sourcesContent":["var currentQuote = '',\n  currentAuthor = '';\n\nfunction openURL(url) {\n  window.open(url, 'Share', 'width=550, height=400, toolbar=0, scrollbars=1 ,location=0 ,statusbar=0,menubar=0, resizable=0');\n}\n\nfunction getQuotes() {\n  fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json').then(response => {\n    return response.json();\n  }).then(data => {\n    var nquote = document.getElementById('new-quote');\n    nquote.addEventListener('click', (event) => getQuote(data));\n    getQuote(data);\n  }).catch(err => {});\n}\ngetQuotes();\n\nfunction getRandomQuote(data) {\n  return data.quotes[Math.floor(Math.random() * data.quotes.length)];\n}\n\nexport function getQuote(data) {\n  let randomQuote = getRandomQuote(data);\n  currentQuote = randomQuote.quote;\n  currentAuthor = randomQuote.author;\n\n  var text = document.getElementById('text');\n  var author = document.getElementById('author');\n  text.innerHTML = '';\n  author.innerHTML = '';\n  text.innerHTML += currentQuote;\n  author.innerHTML += currentAuthor;\n\n  document.getElementById(\"tweet-quote\").addEventListener('click', function(e) {\n    e.preventDefault()\n    openURL('https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' + encodeURIComponent('\"' + currentQuote + '\" ' + currentAuthor));\n  });\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport './quotes.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"quote-box\" className=\"quote-box\">\n        <div id=\"text\" className=\"\">\n\n        </div>\n        <div id=\"author\" className=\"\">\n\n        </div>\n        <button id=\"tweet-quote\" className=\"\">\n          <a href=\"twitter.com/intent/tweet\">Tweet</a>\n        </button>\n        <button id=\"new-quote\" className=\"\" >\n          New Quote\n        </button>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}